import numpy as np
# -------------------------------#
#   是否使用Cuda
#   没有GPU可以设置成False
# -------------------------------#
Cuda = True
# -------------------------------#
#   训练自己的数据集必须要修改的
#   自己需要的分类个数+1，如2+1
# -------------------------------#
num_classes = 31


# -------------------------------------------------------------------#
#   初始随机种子
# -------------------------------------------------------------------#

seed = 1

# -------------------------------------------------------------------#
#   可使用的的主干网络：
#   UHRNet_W18_Small
#   UHRNet_W48
# -------------------------------------------------------------------#

# backbone_list = ['UHRNet_W18_Small', "UHRNet_W18", "UHRNet_W48"]
backbone = "UHRNet_W18_Small"
# ----------------------------------------------------------------------------------------------------------------------------#
#   pretrained      是否使用主干网络的预训练权重，此处使用的是主干的权重，因此是在模型构建的时候进行加载的。
#                   如果设置了model_path，则主干的权值无需加载，pretrained的值无意义。
#                   如果不设置model_path，pretrained = True，此时仅加载主干开始训练。
#                   如果不设置model_path，pretrained = False，Freeze_Train = Fasle，此时从0开始训练，且没有冻结主干的过程。
# ----------------------------------------------------------------------------------------------------------------------------#
pretrained = False
model_path = ""
# ------------------------------#
#   输入图片的大小
# ------------------------------#
input_shape = [1024, 1024]

total_Epoch = 10

batch_size = 4

# ------------------------------------------------------------------#
#   学习率下降方法
#   warmup          warm up+cos 每个iter改变学习率
#   step            每个epoch降低学习率，下降倍数为gamma参数
#   warmup_epoch    开始训练后，多少个epoch达到初始学习率Init_lr
# ------------------------------------------------------------------#
lr_strategy = 'step'  # warmup/step
warmup_epoch = 5
warmup_lr_start = 0
gamma = 0.999
# ------------------------------------------------------------------#
#   其它训练参数：学习率、优化器、学习率下降有关
# ------------------------------------------------------------------#
# ------------------------------------------------------------------#
#   Init_lr         模型的最大学习率
#                   当使用Adam优化器时 Init_lr=1e-4
#                   当使用SGD优化器时 Init_lr=1e-3
#   Min_lr          模型的最小学习率
# ------------------------------------------------------------------#
Init_lr = 1e-4
Min_lr = Init_lr * 0.01
# ------------------------------------------------------------------#
#   optimizer_type  使用到的优化器种类，可选的有adam、sgd
#   momentum        优化器内部使用到的momentum参数
#   weight_decay    权值衰减，可防止过拟合
# ------------------------------------------------------------------#
optimizer_type = "adam"
momentum = 0.937
weight_decay = 5e-4

# ------------------------------------------------------------------#
#   save_period     多少个epoch保存一次权值，默认每个epoch都保存
# ------------------------------------------------------------------#
save_period = 1

# ------------------------------------------------------------------#
#   cityscapes  数据集路径
# ------------------------------------------------------------------#
VOCdevkit_path = 'VOCdevkit'
train_txt_path = "VOC2007/ImageSets/Segmentation/train.txt"
val_txt_path = "VOC2007/ImageSets/Segmentation/val.txt"
# ------------------------------------------------------------------#
#   建议选项：
#   种类少（几类）时，设置为True
#   种类多（十几类）时，如果batch_size比较大（10以上），那么设置为True
#   种类多（十几类）时，如果batch_size比较小（10以下），那么设置为False
# ------------------------------------------------------------------#
dice_loss = False
# ------------------------------------------------------------------#
#   是否使用focal loss来防止正负样本不平衡
# ------------------------------------------------------------------#
focal_loss = False
# ------------------------------------------------------------------#
#   是否给不同种类赋予不同的损失权值，默认是平衡的。
#   设置的话，注意设置成numpy形式的，长度和num_classes一样。
#   如：
#   num_classes = 3
#   cls_weights = np.array([1, 2, 3], np.float32)
# ------------------------------------------------------------------#
cls_weights = np.ones([num_classes], np.float32)
# ------------------------------------------------------------------#
#   num_workers     用于设置是否使用多线程读取数据，1代表关闭多线程
#                   开启后会加快数据读取速度，但是会占用更多内存
#                   keras里开启多线程有些时候速度反而慢了许多
#                   在IO为瓶颈的时候再开启多线程，即GPU运算速度远大于读取图片的速度。
# ------------------------------------------------------------------#
num_workers = 6

# ------------------------------------------------------------------#
#   sync_bn     设置是否室友一个batch的所有数据进行norm
# ------------------------------------------------------------------#
sync_bn = True

# ------------------------------------------------------------------#
#   Gpu_list     对程序而言 ， 哪些GPU可用
# ------------------------------------------------------------------#
Gpu_list = [0, 1, 2, 3, 4, 5, 6, 7]

benchmark = True
